name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: guruai-backend
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Set up environment variables
        run: |
          echo "FLASK_ENV=testing" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://postgres:test_password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "REDIS_HOST=localhost" >> $GITHUB_ENV
          echo "REDIS_PORT=6379" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=test-secret-key" >> $GITHUB_ENV
          echo "ENCRYPTION_KEY=test-encryption-key" >> $GITHUB_ENV
          echo "PII_ENCRYPTION_KEY=test-pii-key" >> $GITHUB_ENV

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v

      - name: Run API tests
        run: |
          pytest tests/api/ -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install security scanning tools
        run: |
          pip install bandit safety semgrep

      - name: Run Bandit security scan
        run: |
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true

      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto app/ --json --output=semgrep-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Enable required APIs
        run: |
          gcloud services enable artifactregistry.googleapis.com
          gcloud services enable run.googleapis.com
          gcloud services enable cloudbuild.googleapis.com
          gcloud services enable redis.googleapis.com
          gcloud services enable vpcaccess.googleapis.com

      - name: Ensure Redis infrastructure exists
        run: |
          # Check if Redis instance exists, create if not
          if ! gcloud redis instances describe guruai-redis --region=$REGION 2>/dev/null; then
            echo "Redis instance not found, creating..."
            gcloud redis instances create guruai-redis \
              --size=1 \
              --region=$REGION \
              --redis-version=redis_7_0 \
              --network=default
          fi

          # Check if VPC connector exists, create if not
          if ! gcloud compute networks vpc-access connectors describe guruai-connector --region=$REGION 2>/dev/null; then
            echo "VPC connector not found, creating..."
            # Create subnet first if it doesn't exist
            gcloud compute networks subnets create guruai-connector-subnet \
              --range=10.8.0.0/28 \
              --network=default \
              --region=$REGION || true
            
            gcloud compute networks vpc-access connectors create guruai-connector \
              --region=$REGION \
              --subnet=guruai-connector-subnet
          fi

      - name: Create Artifact Registry repository
        run: |
          gcloud artifacts repositories create guruai-backend \
            --repository-format=docker \
            --location=$REGION \
            --description="Docker repository for guruai-backend" || true

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker $REGION-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/guruai-backend/app:$GITHUB_SHA .
          docker tag $REGION-docker.pkg.dev/$PROJECT_ID/guruai-backend/app:$GITHUB_SHA $REGION-docker.pkg.dev/$PROJECT_ID/guruai-backend/app:latest

      - name: Push Docker image to Artifact Registry
        run: |
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/guruai-backend/app:$GITHUB_SHA
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/guruai-backend/app:latest

      - name: Get Redis host IP
        run: |
          REDIS_HOST=$(gcloud redis instances describe guruai-redis --region=$REGION --format='value(host)')
          echo "REDIS_HOST=$REDIS_HOST" >> $GITHUB_ENV
          echo "Redis host IP: $REDIS_HOST"

      - name: Deploy to Cloud Run (Staging)
        run: |
          gcloud run deploy $SERVICE_NAME-staging \
            --image $REGION-docker.pkg.dev/$PROJECT_ID/guruai-backend/app:$GITHUB_SHA \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --memory 2Gi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 300 \
            --concurrency 80 \
            --set-env-vars="ENVIRONMENT=staging,REDIS_HOST=$REDIS_HOST,REDIS_PORT=6379" \
            --vpc-connector guruai-connector

      - name: Run smoke tests on staging
        run: |
          STAGING_URL=$(gcloud run services describe $SERVICE_NAME-staging --region=$REGION --format='value(status.url)')
          curl -f $STAGING_URL/api/v1/health || exit 1
          # Optional: Add more smoke tests if they exist
          # pytest tests/smoke/ --base-url=$STAGING_URL

      - name: Deploy to Cloud Run (Production)
        if: success()
        run: |
          # Capture current revision for potential rollback
          CURRENT_REVISION=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.latestReadyRevisionName)' 2>/dev/null || echo "none")
          echo "CURRENT_REVISION=$CURRENT_REVISION" >> $GITHUB_ENV
          echo "Current production revision: $CURRENT_REVISION"
          
          gcloud run deploy $SERVICE_NAME \
            --image $REGION-docker.pkg.dev/$PROJECT_ID/guruai-backend/app:$GITHUB_SHA \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --memory 2Gi \
            --cpu 1 \
            --min-instances 1 \
            --max-instances 10 \
            --timeout 300 \
            --concurrency 80 \
            --set-env-vars="ENVIRONMENT=production,REDIS_HOST=$REDIS_HOST,REDIS_PORT=6379" \
            --vpc-connector guruai-connector

      - name: Update traffic allocation (Blue-Green)
        if: ${{ !contains(github.event.head_commit.message, '[skip-gradual]') }}
        run: |
          # Get the latest revision name from the deployment
          LATEST_REVISION=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.latestCreatedRevisionName)')
          echo "Latest revision: $LATEST_REVISION"
          
          # Health check the new revision before traffic shift
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
          echo "Performing health check on new revision..."
          
          # Wait for revision to be ready
          sleep 60
          
          # Health check with retry
          for i in {1..5}; do
            if curl -f -s "$SERVICE_URL/api/v1/health" > /dev/null; then
              echo "Health check passed on attempt $i"
              break
            else
              echo "Health check failed on attempt $i, retrying..."
              sleep 30
            fi
            if [ $i -eq 5 ]; then
              echo "Health check failed after 5 attempts, aborting traffic shift"
              exit 1
            fi
          done
          
          # Gradual traffic shift: 10% -> 50% -> 100%
          echo "Shifting 10% traffic to new revision..."
          gcloud run services update-traffic $SERVICE_NAME \
            --to-revisions=$LATEST_REVISION=10 \
            --region=$REGION

          sleep 300  # Wait 5 minutes

          # Check metrics and error rates
          # If successful, continue to 50%
          echo "Shifting 50% traffic to new revision..."
          gcloud run services update-traffic $SERVICE_NAME \
            --to-revisions=$LATEST_REVISION=50 \
            --region=$REGION

          sleep 300  # Wait 5 minutes

          # Final deployment to 100%
          echo "Shifting 100% traffic to new revision..."
          gcloud run services update-traffic $SERVICE_NAME \
            --to-revisions=$LATEST_REVISION=100 \
            --region=$REGION

      - name: Direct traffic allocation (Skip Gradual)
        if: ${{ contains(github.event.head_commit.message, '[skip-gradual]') }}
        run: |
          # Get the latest revision name from the deployment
          LATEST_REVISION=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.latestCreatedRevisionName)')
          echo "Latest revision: $LATEST_REVISION"
          echo "Skipping gradual rollout, switching 100% traffic immediately..."
          
          # Direct 100% traffic switch
          gcloud run services update-traffic $SERVICE_NAME \
            --to-revisions=$LATEST_REVISION=100 \
            --region=$REGION

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: build-and-deploy

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Rollback to previous revision
        run: |
          PREVIOUS_REVISION=$(gcloud run revisions list --service=$SERVICE_NAME --region=$REGION --format='value(metadata.name)' --limit=2 | tail -n 1)
          gcloud run services update-traffic $SERVICE_NAME \
            --to-revisions=$PREVIOUS_REVISION=100 \
            --region=$REGION

      - name: Send rollback notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 🚨 Deployment failed and rollback executed for ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
