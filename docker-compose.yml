# Docker Compose for local development and testing
version: "3.8"

services:
  app:
    build: .
    ports:
      - "8080:8080"
    environment:
      - FLASK_ENV=development
      - REDIS_HOST=redis
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/guruai_dev
      - JWT_SECRET_KEY=dev-secret-key
      - ENCRYPTION_KEY=dev-encryption-key
      - PII_ENCRYPTION_KEY=dev-pii-key
      - RATE_LIMITING_ENABLED=true
      - CONTENT_FILTERING_ENABLED=true
      - AUDIT_LOGGING_ENABLED=true
    depends_on:
      - redis
      - postgres
    volumes:
      - .:/app
      - /app/__pycache__
      - ./logs:/app/logs
    command:
      [
        "gunicorn",
        "--bind",
        "0.0.0.0:8080",
        "--workers",
        "2",
        "--reload",
        "main:app",
      ]

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=guruai_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
